{"version":3,"sources":["../src/slicer.js"],"names":["getSliceRange","hasSliceRange","sliceCode","label","regExp","matches","exec","slice","start","end","startOrUndefined","parseInt","undefined","endOrUndefined","range","code","slitted","split","length","join","trim"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;AAYA;;;;;;;;;;;;QAKgBA,a,GAAAA,a;QAkBAC,a,GAAAA,a;QAaAC,S,GAAAA,S;AA/BT,SAASF,aAAT,CAAuBG,KAAvB,EAA8B;AACjC,QAAMC,SAAS,0CAAf;AACA,QAAMC,UAAUD,OAAOE,IAAP,CAAYH,KAAZ,CAAhB;AACA,QAAIE,YAAY,IAAhB,EAAsB;AAClB,eAAO,EAAP;AACH;AACD;;AANiC,yBAOZA,QAAQE,KAAR,CAAc,CAAd,EAAgB,CAAhB,CAPY;AAAA;AAAA,QAO1BC,KAP0B;AAAA,QAOnBC,GAPmB;;AAQjC,QAAMC,mBAAmBF,UAAU,EAAV,GAAeG,SAASH,KAAT,EAAgB,EAAhB,CAAf,GAAqCI,SAA9D;AACA,QAAMC,iBAAiBJ,QAAQ,EAAR,GAAaE,SAASF,GAAT,EAAc,EAAd,CAAb,GAAiCG,SAAxD;AACA,WAAO,CAACF,gBAAD,EAAmBG,cAAnB,CAAP;AACH;;AAED;;;;;AAKO,SAASZ,aAAT,CAAuBE,KAAvB,EAA8B;AACjC,QAAMW,QAAQd,cAAcG,KAAd,CAAd;;AADiC,gCAEZW,KAFY;AAAA,QAE1BN,KAF0B;AAAA,QAEnBC,GAFmB;;AAGjC,WAAOD,UAAUI,SAAV,IAAuBH,QAAQG,SAAtC;AACH;;AAED;;;;;;;AAOO,SAASV,SAAT,CAAmBa,IAAnB,EAAyBP,KAAzB,EAAgCC,GAAhC,EAAqC;AACxC,QAAID,UAAUI,SAAV,IAAuBH,QAAQG,SAAnC,EAA8C;AAC1C,eAAOG,IAAP;AACH;AACD,QAAMC,UAAUD,KAAKE,KAAL,CAAW,IAAX,CAAhB;AACA,QAAIT,UAAUI,SAAd,EAAyB;AACrBJ,gBAAQ,CAAR;AACH;AACD,QAAIC,QAAQG,SAAZ,EAAuB;AACnBH,cAAMO,QAAQE,MAAd;AACH;AACD,WAAOF,QAAQT,KAAR,CAAcC,QAAQ,CAAtB,EAAyBC,GAAzB,EAA8BU,IAA9B,CAAmC,IAAnC,EAAyCC,IAAzC,EAAP;AACH","file":"slicer.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n format: [import:<start-lineNumber>-<end-lineNumber>](path/to/file)\n lineNumber start with 1.\n\n Patterns:\n\n All: [import, hello-world.js](../src/hello-world.js)\n 1-2: [import:1-2, hello-world.js](../src/hello-world.js)\n 2-3: [import:2-3, hello-world.js](../src/hello-world.js)\n 2>=: [import:2-, hello-world.js](../src/hello-world.js)\n <=3: [import:-3, hello-world.js](../src/hello-world.js)\n */\n/**\n * get range from label\n * @param {string} label\n * @returns {number[]}\n */\nexport function getSliceRange(label) {\n    const regExp = /^(?:include|import):(\\d*)-(\\d*)[,\\s]?.*$/;\n    const matches = regExp.exec(label);\n    if (matches === null) {\n        return [];\n    }\n    // return [undefined, undefined] if not matched, else contains [all,start,end].\n    const [start, end] = matches.slice(1,3); \n    const startOrUndefined = start !== \"\" ? parseInt(start, 10) : undefined;\n    const endOrUndefined = end !== \"\" ? parseInt(end, 10) : undefined;\n    return [startOrUndefined, endOrUndefined];\n}\n\n/**\n * has range command in the label\n * @param {string} label\n * @returns {boolean}\n */\nexport function hasSliceRange(label) {\n    const range = getSliceRange(label);\n    const [start, end] = range;\n    return start !== undefined || end !== undefined;\n}\n\n/**\n * slice {@link code} with {@link start} and {@link end}\n * @param {string} code\n * @param {number|undefined} [start]\n * @param {number|undefined} [end]\n * @returns {string}\n */\nexport function sliceCode(code, start, end) {\n    if (start === undefined && end === undefined) {\n        return code;\n    }\n    const slitted = code.split(\"\\n\");\n    if (start === undefined) {\n        start = 1;\n    }\n    if (end === undefined) {\n        end = slitted.length;\n    }\n    return slitted.slice(start - 1, end).join(\"\\n\").trim();\n}\n"]}